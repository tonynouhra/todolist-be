"""
Todo ORM model representing a hierarchical task management system.

This module defines the SQLAlchemy ORM model for todos with support for
hierarchical structure, AI-generated subtasks, and relationships with users,
projects, and files.

Classes:
    Todo: Represents a todo item with hierarchical structure and AI capabilities.
"""

from sqlalchemy import Column, String, Text, Integer, DateTime, Boolean, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship, backref
from .base import BaseModel


class Todo(BaseModel):
    """
     model representing a hierarchical task management system.
    
    This model supports unlimited nesting of subtasks, AI-generated tasks,
    and relationships with users, projects, and files. Each todos belongs to
    a user and can optionally be part of a project or be a subtask of another todo.
    
    Attributes:
        user_id: Foreign key to the User who owns this todo
        project_id: Optional foreign key to associated Project
        parent_todo_id: Optional foreign key for hierarchical structure
        title:  title (required, max 500 chars)
        description: Optional detailed description
        status: Current status (todo, in_progress, done)
        priority: Priority level 1-5, defaults to 3
        due_date: Optional deadline
        completed_at: Timestamp when marked as done
        ai_generated: Whether this todo was generated by AI
        
    Relationships:
        user: The User who owns this todo
        project: Optional associated Project
        subtasks: List of child todos
        parent: Parent todo (for subtasks)
        files: Associated files
    """
    __tablename__ = "todos"

    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False)
    project_id = Column(UUID(as_uuid=True), ForeignKey("projects.id"))
    parent_todo_id = Column(UUID(as_uuid=True), ForeignKey("todos.id"))

    title = Column(String(500), nullable=False)
    description = Column(Text)
    status = Column(String(20), default="todo")  # todo, in_progress, done
    priority = Column(Integer, default=3)  # 1-5 scale
    due_date = Column(DateTime(timezone=True))
    completed_at = Column(DateTime(timezone=True))
    ai_generated = Column(Boolean, default=False)

    # Relationships
    user = relationship("User", back_populates="todos")
    project = relationship("Project", back_populates="todos")
    subtasks = relationship(
        "Todo",
        backref=backref("parent", remote_side="Todo.id"),
        foreign_keys=[parent_todo_id],
    )
    files = relationship("File", back_populates="todo")

    def __repr__(self) -> str:
        """String representation of the Todo."""
        return f"<Todo(id={self.id}, title='{self.title[:30]}...', status='{self.status}')>"

    def is_completed(self) -> bool:
        """Check if the todo is completed."""
        return self.status == "done"

    def has_subtasks(self) -> bool:
        """Check if the todo has subtasks."""
        return len(self.subtasks) > 0

    def is_overdue(self) -> bool:
        """Check if the todo is overdue."""
        from datetime import datetime, timezone
        return (
            self.due_date is not None 
            and self.due_date < datetime.now(timezone.utc) 
            and not self.is_completed()
        )