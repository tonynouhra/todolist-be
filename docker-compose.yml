services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: todolist_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_todo
      POSTGRES_USER: todouser
      POSTGRES_PASSWORD: todopass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todouser -d ai_todo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: todolist_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: todolist_backend
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://todouser:todopass@postgres:5432/ai_todo
      - REDIS_URL=redis://:redispass@redis:6379
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: todolist_celery_worker
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4 -Q notifications
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://todouser:todopass@postgres:5432/ai_todo
      - REDIS_URL=redis://:redispass@redis:6379
      - CELERY_BROKER_URL=redis://:redispass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redispass@redis:6379/2
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    volumes:
      - ./app:/app/app
      - ./models:/app/models

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: todolist_celery_beat
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://todouser:todopass@postgres:5432/ai_todo
      - REDIS_URL=redis://:redispass@redis:6379
      - CELERY_BROKER_URL=redis://:redispass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redispass@redis:6379/2
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    volumes:
      - ./app:/app/app
      - ./models:/app/models

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: todolist_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - frontend-network

networks:
  backend-network:
    driver: bridge
    internal: true  # Isolate backend services
  frontend-network:
    driver: bridge  # Allow external access for frontend communication

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local