name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-quality:
    name: PR Quality Assessment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper diff

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install modern quality tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black pylint

      - name: Check PR size
        run: |
          # Count changed lines
          CHANGED_LINES=$(git diff --shortstat origin/${{ github.base_ref }}..HEAD | grep -oE '[0-9]+ insertions|[0-9]+ deletions' | grep -oE '[0-9]+' | awk '{sum += $1} END {print sum}')
          echo "Changed lines: $CHANGED_LINES"
          
          if [ "$CHANGED_LINES" -gt 1000 ]; then
            echo "‚ö†Ô∏è Large PR detected ($CHANGED_LINES lines changed). Consider breaking into smaller PRs."
            echo "large-pr=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ PR size is reasonable ($CHANGED_LINES lines changed)"
            echo "large-pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for breaking changes
        run: |
          # Check for potential breaking changes in API
          BREAKING_PATTERNS="removed|deleted|deprecated|breaking"
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "(controller|schema|model)" | xargs git diff origin/${{ github.base_ref }}..HEAD | grep -iE "$BREAKING_PATTERNS"; then
            echo "‚ö†Ô∏è Potential breaking changes detected. Please review carefully."
          else
            echo "‚úÖ No obvious breaking changes detected"
          fi

      - name: Check code formatting and imports
        run: |
          # Check if code needs formatting
          echo "üîç Checking code formatting with Black..."
          if ! black --check app/ tests/; then
            echo "‚ùå Code formatting issues found. Run 'black app/ tests/' to fix."
            exit 1
          fi
          echo "‚úÖ Black formatting looks good"
          
          echo "üîç Checking imports and linting with Ruff..."
          if ! ruff check app/ tests/ --output-format=github; then
            echo "‚ùå Import sorting or linting issues found. Run 'ruff check app/ tests/ --fix' to fix."
            exit 1
          fi
          echo "‚úÖ Ruff checks passed"

      - name: Code quality summary
        run: |
          echo "üéØ Running comprehensive quality check..."
          if python quality_check.py; then
            echo "‚úÖ All quality checks passed!"
          else
            echo "‚ùå Quality checks failed. See details above."
            exit 1
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" app/ tests/ --include="*.py" || true | wc -l)
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $TODO_COUNT TODO/FIXME comments:"
            grep -r "TODO\|FIXME\|XXX\|HACK" app/ tests/ --include="*.py" || true
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

      - name: Check test coverage for new files
        run: |
          echo "Checking if new Python files have corresponding tests..."
          NEW_PY_FILES=$(git diff --name-only --diff-filter=A origin/${{ github.base_ref }}..HEAD | grep "\.py$" | grep -E "^app/" || true)
          
          if [ -n "$NEW_PY_FILES" ]; then
            echo "New Python files detected:"
            echo "$NEW_PY_FILES"
            
            MISSING_TESTS=""
            for file in $NEW_PY_FILES; do
              # Skip __init__.py and main.py files
              if [[ "$file" == *"__init__.py"* ]] || [[ "$file" == *"main.py"* ]]; then
                continue
              fi
              
              # Convert app/path/file.py to tests/path/test_file.py
              TEST_FILE=$(echo "$file" | sed 's|^app/|tests/|' | sed 's|\.py$|.py|' | sed 's|/\([^/]*\)\.py$|/test_\1.py|')
              
              if [ ! -f "$TEST_FILE" ]; then
                MISSING_TESTS="$MISSING_TESTS\n- $file (expected test: $TEST_FILE)"
              fi
            done
            
            if [ -n "$MISSING_TESTS" ]; then
              echo "‚ö†Ô∏è New files without corresponding tests:"
              echo -e "$MISSING_TESTS"
            else
              echo "‚úÖ All new files have corresponding tests"
            fi
          else
            echo "‚úÖ No new Python files detected"
          fi

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: pr-quality
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "<!-- PR Quality Check -->"

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            <!-- PR Quality Check -->
            ## üîç PR Quality Check Results
            
            **Status**: ${{ needs.pr-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
            
            ### Quick Checklist
            - [ ] Code is properly formatted (Black)
            - [ ] Imports are sorted and no linting errors (Ruff)
            - [ ] Code quality score ‚â• 9.5/10 (Pylint)
            - [ ] Tests added for new functionality
            - [ ] No breaking changes (or properly documented)
            - [ ] PR size is reasonable (< 1000 lines)
            
            ### Next Steps
            ${{ needs.pr-quality.result == 'success' && 'üéâ Your PR looks good! The CI pipeline will run full tests.' || '‚ö†Ô∏è Please address the issues above before merging.' }}
            
            ---
            *This comment is automatically updated on each push.*