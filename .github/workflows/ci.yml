name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_ai_todo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov aiosqlite bandit safety ruff black isort
          
      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Set up environment variables
        run: |
          echo "TESTING=true" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/test_ai_todo" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "GEMINI_API_KEY=" >> $GITHUB_ENV
          echo "AI_ENABLED=false" >> $GITHUB_ENV

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U test; do echo "Waiting for postgres..."; sleep 1; done'
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do echo "Waiting for redis..."; sleep 1; done'
          echo "Redis is ready!"

      - name: Run unit tests
        run: |
          python run_tests.py --unit --verbose

      - name: Run integration tests
        run: |
          python run_tests.py --integration --verbose

      - name: Run API tests
        run: |
          python run_tests.py --api --verbose

      - name: Run E2E tests
        run: |
          python run_tests.py --e2e --verbose

      - name: Generate coverage report
        run: |
          python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install code quality tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy pylint

      - name: Check code formatting with Black
        run: |
          black --check --diff app/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff app/ tests/

      - name: Lint with Ruff
        run: |
          ruff check app/ tests/

      - name: Type check with MyPy
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true  # MyPy can be strict, allow warnings

      - name: Lint with Pylint
        run: |
          pylint app/ --disable=all --enable=E,W,C0103,C0111 --exit-zero
        continue-on-error: true  # Pylint can be very strict

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -ll -i -x */tests/*

      - name: Check dependencies for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto app/ --json --output=semgrep-report.json || true
          semgrep --config=auto app/
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Audit dependencies
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-report
          path: pip-audit-report.json

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t todolist-backend:test .
        continue-on-error: true  # Allow to fail if no Dockerfile exists

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_ai_todo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark locust

      - name: Set up environment variables
        run: |
          echo "TEST_DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/test_ai_todo" >> $GITHUB_ENV

      - name: Run performance tests
        run: |
          python -m pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json || true
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: benchmark.json

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, dependency-check]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Test job: ${{ needs.test.result }}"
          echo "Code quality job: ${{ needs.code-quality.result }}"
          echo "Security job: ${{ needs.security.result }}"
          echo "Dependency check job: ${{ needs.dependency-check.result }}"
          
          if [[ "${{ needs.test.result }}" == "failure" || 
                "${{ needs.code-quality.result }}" == "failure" || 
                "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ CI Pipeline passed"
          fi